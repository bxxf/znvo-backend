// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/data/v1/data.proto

// # Data Service (v1)
// The data service is responsible for handling the requests for getting/sharing data with the user.
package dataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bxxf/znvo-backend/gen/api/data/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DataServiceName is the fully-qualified name of the DataService service.
	DataServiceName = "data.v1.DataService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DataServiceGetSharedDataProcedure is the fully-qualified name of the DataService's GetSharedData
	// RPC.
	DataServiceGetSharedDataProcedure = "/data.v1.DataService/GetSharedData"
	// DataServiceShareUserDataProcedure is the fully-qualified name of the DataService's ShareUserData
	// RPC.
	DataServiceShareUserDataProcedure = "/data.v1.DataService/ShareUserData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	dataServiceServiceDescriptor             = v1.File_api_data_v1_data_proto.Services().ByName("DataService")
	dataServiceGetSharedDataMethodDescriptor = dataServiceServiceDescriptor.Methods().ByName("GetSharedData")
	dataServiceShareUserDataMethodDescriptor = dataServiceServiceDescriptor.Methods().ByName("ShareUserData")
)

// DataServiceClient is a client for the data.v1.DataService service.
type DataServiceClient interface {
	// GetSharedData returns the shared data for the user.
	GetSharedData(context.Context, *connect.Request[v1.GetSharedDataRequest]) (*connect.ServerStreamForClient[v1.GetSharedDataResponse], error)
	// ShareUserData shares the user data with the user.
	ShareUserData(context.Context, *connect.Request[v1.ShareDataRequest]) (*connect.Response[v1.ShareDataResponse], error)
}

// NewDataServiceClient constructs a client for the data.v1.DataService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDataServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DataServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dataServiceClient{
		getSharedData: connect.NewClient[v1.GetSharedDataRequest, v1.GetSharedDataResponse](
			httpClient,
			baseURL+DataServiceGetSharedDataProcedure,
			connect.WithSchema(dataServiceGetSharedDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		shareUserData: connect.NewClient[v1.ShareDataRequest, v1.ShareDataResponse](
			httpClient,
			baseURL+DataServiceShareUserDataProcedure,
			connect.WithSchema(dataServiceShareUserDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// dataServiceClient implements DataServiceClient.
type dataServiceClient struct {
	getSharedData *connect.Client[v1.GetSharedDataRequest, v1.GetSharedDataResponse]
	shareUserData *connect.Client[v1.ShareDataRequest, v1.ShareDataResponse]
}

// GetSharedData calls data.v1.DataService.GetSharedData.
func (c *dataServiceClient) GetSharedData(ctx context.Context, req *connect.Request[v1.GetSharedDataRequest]) (*connect.ServerStreamForClient[v1.GetSharedDataResponse], error) {
	return c.getSharedData.CallServerStream(ctx, req)
}

// ShareUserData calls data.v1.DataService.ShareUserData.
func (c *dataServiceClient) ShareUserData(ctx context.Context, req *connect.Request[v1.ShareDataRequest]) (*connect.Response[v1.ShareDataResponse], error) {
	return c.shareUserData.CallUnary(ctx, req)
}

// DataServiceHandler is an implementation of the data.v1.DataService service.
type DataServiceHandler interface {
	// GetSharedData returns the shared data for the user.
	GetSharedData(context.Context, *connect.Request[v1.GetSharedDataRequest], *connect.ServerStream[v1.GetSharedDataResponse]) error
	// ShareUserData shares the user data with the user.
	ShareUserData(context.Context, *connect.Request[v1.ShareDataRequest]) (*connect.Response[v1.ShareDataResponse], error)
}

// NewDataServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDataServiceHandler(svc DataServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dataServiceGetSharedDataHandler := connect.NewServerStreamHandler(
		DataServiceGetSharedDataProcedure,
		svc.GetSharedData,
		connect.WithSchema(dataServiceGetSharedDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	dataServiceShareUserDataHandler := connect.NewUnaryHandler(
		DataServiceShareUserDataProcedure,
		svc.ShareUserData,
		connect.WithSchema(dataServiceShareUserDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/data.v1.DataService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DataServiceGetSharedDataProcedure:
			dataServiceGetSharedDataHandler.ServeHTTP(w, r)
		case DataServiceShareUserDataProcedure:
			dataServiceShareUserDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDataServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDataServiceHandler struct{}

func (UnimplementedDataServiceHandler) GetSharedData(context.Context, *connect.Request[v1.GetSharedDataRequest], *connect.ServerStream[v1.GetSharedDataResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("data.v1.DataService.GetSharedData is not implemented"))
}

func (UnimplementedDataServiceHandler) ShareUserData(context.Context, *connect.Request[v1.ShareDataRequest]) (*connect.Response[v1.ShareDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("data.v1.DataService.ShareUserData is not implemented"))
}
