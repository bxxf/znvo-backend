// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file api/data/v1/data.proto (package data.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

//
//# Data Service (v1)
//The data service is responsible for handling the requests for getting/sharing data with the user.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GetSharedDataRequest is the request for getting the shared data.
 *
 * @generated from message data.v1.GetSharedDataRequest
 */
export class GetSharedDataRequest extends Message<GetSharedDataRequest> {
  /**
   * The user id.
   *
   * @generated from field: string user_token = 1;
   */
  userToken = "";

  constructor(data?: PartialMessage<GetSharedDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "data.v1.GetSharedDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSharedDataRequest {
    return new GetSharedDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSharedDataRequest {
    return new GetSharedDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSharedDataRequest {
    return new GetSharedDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSharedDataRequest | PlainMessage<GetSharedDataRequest> | undefined, b: GetSharedDataRequest | PlainMessage<GetSharedDataRequest> | undefined): boolean {
    return proto3.util.equals(GetSharedDataRequest, a, b);
  }
}

/**
 * GetSharedDataResponse is the response for getting the shared data.
 *
 * @generated from message data.v1.GetSharedDataResponse
 */
export class GetSharedDataResponse extends Message<GetSharedDataResponse> {
  /**
   * The shared data.
   *
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<GetSharedDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "data.v1.GetSharedDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSharedDataResponse {
    return new GetSharedDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSharedDataResponse {
    return new GetSharedDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSharedDataResponse {
    return new GetSharedDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSharedDataResponse | PlainMessage<GetSharedDataResponse> | undefined, b: GetSharedDataResponse | PlainMessage<GetSharedDataResponse> | undefined): boolean {
    return proto3.util.equals(GetSharedDataResponse, a, b);
  }
}

/**
 * ShareDataRequest is the request for sharing the user data.
 *
 * @generated from message data.v1.ShareDataRequest
 */
export class ShareDataRequest extends Message<ShareDataRequest> {
  /**
   * The user id.
   *
   * @generated from field: string user_token = 1;
   */
  userToken = "";

  /**
   * Recipients user id.
   *
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * The data to share.
   *
   * @generated from field: string data = 3;
   */
  data = "";

  constructor(data?: PartialMessage<ShareDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "data.v1.ShareDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShareDataRequest {
    return new ShareDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShareDataRequest {
    return new ShareDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShareDataRequest {
    return new ShareDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ShareDataRequest | PlainMessage<ShareDataRequest> | undefined, b: ShareDataRequest | PlainMessage<ShareDataRequest> | undefined): boolean {
    return proto3.util.equals(ShareDataRequest, a, b);
  }
}

/**
 * ShareDataResponse is the response for sharing the user data.
 *
 * @generated from message data.v1.ShareDataResponse
 */
export class ShareDataResponse extends Message<ShareDataResponse> {
  /**
   * The shared data.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<ShareDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "data.v1.ShareDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShareDataResponse {
    return new ShareDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShareDataResponse {
    return new ShareDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShareDataResponse {
    return new ShareDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ShareDataResponse | PlainMessage<ShareDataResponse> | undefined, b: ShareDataResponse | PlainMessage<ShareDataResponse> | undefined): boolean {
    return proto3.util.equals(ShareDataResponse, a, b);
  }
}

