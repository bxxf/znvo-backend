// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file api/auth/v1/auth.proto (package auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// # Auth service (v1)

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message auth.v1.InitializeRegisterRequest
 */
export class InitializeRegisterRequest extends Message<InitializeRegisterRequest> {
  constructor(data?: PartialMessage<InitializeRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeRegisterRequest | PlainMessage<InitializeRegisterRequest> | undefined, b: InitializeRegisterRequest | PlainMessage<InitializeRegisterRequest> | undefined): boolean {
    return proto3.util.equals(InitializeRegisterRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.InitializeRegisterResponse
 */
export class InitializeRegisterResponse extends Message<InitializeRegisterResponse> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string options = 2;
   */
  options = "";

  constructor(data?: PartialMessage<InitializeRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeRegisterResponse | PlainMessage<InitializeRegisterResponse> | undefined, b: InitializeRegisterResponse | PlainMessage<InitializeRegisterResponse> | undefined): boolean {
    return proto3.util.equals(InitializeRegisterResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.FinishRegisterRequest
 */
export class FinishRegisterRequest extends Message<FinishRegisterRequest> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string userid = 2;
   */
  userid = "";

  /**
   * @generated from field: string credid = 3;
   */
  credid = "";

  /**
   * @generated from field: string clientdata = 4;
   */
  clientdata = "";

  /**
   * @generated from field: string attestation = 5;
   */
  attestation = "";

  constructor(data?: PartialMessage<FinishRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clientdata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "attestation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FinishRegisterRequest | PlainMessage<FinishRegisterRequest> | undefined, b: FinishRegisterRequest | PlainMessage<FinishRegisterRequest> | undefined): boolean {
    return proto3.util.equals(FinishRegisterRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.FinishRegisterResponse
 */
export class FinishRegisterResponse extends Message<FinishRegisterResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<FinishRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FinishRegisterResponse | PlainMessage<FinishRegisterResponse> | undefined, b: FinishRegisterResponse | PlainMessage<FinishRegisterResponse> | undefined): boolean {
    return proto3.util.equals(FinishRegisterResponse, a, b);
  }
}

