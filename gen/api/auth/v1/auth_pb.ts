// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file api/auth/v1/auth.proto (package auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

//
//# Auth Service (v1)
//This service is responsible for handling user authentication and registration.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Request to initialize a registration
 *
 * @generated from message auth.v1.InitializeRegisterRequest
 */
export class InitializeRegisterRequest extends Message<InitializeRegisterRequest> {
  constructor(data?: PartialMessage<InitializeRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeRegisterRequest {
    return new InitializeRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeRegisterRequest | PlainMessage<InitializeRegisterRequest> | undefined, b: InitializeRegisterRequest | PlainMessage<InitializeRegisterRequest> | undefined): boolean {
    return proto3.util.equals(InitializeRegisterRequest, a, b);
  }
}

/**
 * Response to initialize a registration - contains the session ID and publickey options
 *
 * @generated from message auth.v1.InitializeRegisterResponse
 */
export class InitializeRegisterResponse extends Message<InitializeRegisterResponse> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string options = 2;
   */
  options = "";

  constructor(data?: PartialMessage<InitializeRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeRegisterResponse {
    return new InitializeRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeRegisterResponse | PlainMessage<InitializeRegisterResponse> | undefined, b: InitializeRegisterResponse | PlainMessage<InitializeRegisterResponse> | undefined): boolean {
    return proto3.util.equals(InitializeRegisterResponse, a, b);
  }
}

/**
 * Request to finish a registration - contains the session ID, user ID, credential ID, client data, and attestation
 *
 * @generated from message auth.v1.FinishRegisterRequest
 */
export class FinishRegisterRequest extends Message<FinishRegisterRequest> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string userid = 2;
   */
  userid = "";

  /**
   * @generated from field: string credid = 3;
   */
  credid = "";

  /**
   * @generated from field: string clientdata = 4;
   */
  clientdata = "";

  /**
   * @generated from field: string attestation = 5;
   */
  attestation = "";

  /**
   * @generated from field: string dataPublicKey = 6;
   */
  dataPublicKey = "";

  constructor(data?: PartialMessage<FinishRegisterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishRegisterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "userid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clientdata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "attestation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "dataPublicKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishRegisterRequest {
    return new FinishRegisterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FinishRegisterRequest | PlainMessage<FinishRegisterRequest> | undefined, b: FinishRegisterRequest | PlainMessage<FinishRegisterRequest> | undefined): boolean {
    return proto3.util.equals(FinishRegisterRequest, a, b);
  }
}

/**
 * Response to finish a registration - contains the JWT token
 *
 * @generated from message auth.v1.FinishRegisterResponse
 */
export class FinishRegisterResponse extends Message<FinishRegisterResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<FinishRegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishRegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishRegisterResponse {
    return new FinishRegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FinishRegisterResponse | PlainMessage<FinishRegisterResponse> | undefined, b: FinishRegisterResponse | PlainMessage<FinishRegisterResponse> | undefined): boolean {
    return proto3.util.equals(FinishRegisterResponse, a, b);
  }
}

/**
 * Request to get a user
 *
 * @generated from message auth.v1.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserRequest | PlainMessage<GetUserRequest> | undefined, b: GetUserRequest | PlainMessage<GetUserRequest> | undefined): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * Response to get a user - contains the user ID
 *
 * @generated from message auth.v1.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserResponse | PlainMessage<GetUserResponse> | undefined, b: GetUserResponse | PlainMessage<GetUserResponse> | undefined): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * Request to initialize a login
 *
 * @generated from message auth.v1.InitializeLoginRequest
 */
export class InitializeLoginRequest extends Message<InitializeLoginRequest> {
  /**
   * @generated from field: string userid = 1;
   */
  userid = "";

  constructor(data?: PartialMessage<InitializeLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeLoginRequest {
    return new InitializeLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeLoginRequest {
    return new InitializeLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeLoginRequest {
    return new InitializeLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeLoginRequest | PlainMessage<InitializeLoginRequest> | undefined, b: InitializeLoginRequest | PlainMessage<InitializeLoginRequest> | undefined): boolean {
    return proto3.util.equals(InitializeLoginRequest, a, b);
  }
}

/**
 * Response to initialize a login - contains the session ID and publickey options
 *
 * @generated from message auth.v1.InitializeLoginResponse
 */
export class InitializeLoginResponse extends Message<InitializeLoginResponse> {
  /**
   * @generated from field: string sid = 1;
   */
  sid = "";

  /**
   * @generated from field: string options = 2;
   */
  options = "";

  constructor(data?: PartialMessage<InitializeLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.InitializeLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "options", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializeLoginResponse {
    return new InitializeLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializeLoginResponse {
    return new InitializeLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializeLoginResponse {
    return new InitializeLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitializeLoginResponse | PlainMessage<InitializeLoginResponse> | undefined, b: InitializeLoginResponse | PlainMessage<InitializeLoginResponse> | undefined): boolean {
    return proto3.util.equals(InitializeLoginResponse, a, b);
  }
}

/**
 * Request to finish a login - contains the user ID, session ID, credential ID, auth data, client data, and signature
 *
 * @generated from message auth.v1.FinishLoginRequest
 */
export class FinishLoginRequest extends Message<FinishLoginRequest> {
  /**
   * @generated from field: string userid = 1;
   */
  userid = "";

  /**
   * @generated from field: string sid = 2;
   */
  sid = "";

  /**
   * @generated from field: string credid = 3;
   */
  credid = "";

  /**
   * @generated from field: string authdata = 4;
   */
  authdata = "";

  /**
   * @generated from field: string clientdata = 5;
   */
  clientdata = "";

  /**
   * @generated from field: string signature = 6;
   */
  signature = "";

  constructor(data?: PartialMessage<FinishLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "authdata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "clientdata", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishLoginRequest {
    return new FinishLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishLoginRequest {
    return new FinishLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishLoginRequest {
    return new FinishLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FinishLoginRequest | PlainMessage<FinishLoginRequest> | undefined, b: FinishLoginRequest | PlainMessage<FinishLoginRequest> | undefined): boolean {
    return proto3.util.equals(FinishLoginRequest, a, b);
  }
}

/**
 * Response to finish a login - contains the JWT token
 *
 * @generated from message auth.v1.FinishLoginResponse
 */
export class FinishLoginResponse extends Message<FinishLoginResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<FinishLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.FinishLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FinishLoginResponse {
    return new FinishLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FinishLoginResponse {
    return new FinishLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FinishLoginResponse {
    return new FinishLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FinishLoginResponse | PlainMessage<FinishLoginResponse> | undefined, b: FinishLoginResponse | PlainMessage<FinishLoginResponse> | undefined): boolean {
    return proto3.util.equals(FinishLoginResponse, a, b);
  }
}

