// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/ai/v1/ai.proto

// # Ai Service

package aiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bxxf/znvo-backend/gen/api/ai/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AiServiceName is the fully-qualified name of the AiService service.
	AiServiceName = "ai.v1.AiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AiServiceStartSessionProcedure is the fully-qualified name of the AiService's StartSession RPC.
	AiServiceStartSessionProcedure = "/ai.v1.AiService/StartSession"
	// AiServiceSendMsgProcedure is the fully-qualified name of the AiService's SendMsg RPC.
	AiServiceSendMsgProcedure = "/ai.v1.AiService/SendMsg"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aiServiceServiceDescriptor            = v1.File_api_ai_v1_ai_proto.Services().ByName("AiService")
	aiServiceStartSessionMethodDescriptor = aiServiceServiceDescriptor.Methods().ByName("StartSession")
	aiServiceSendMsgMethodDescriptor      = aiServiceServiceDescriptor.Methods().ByName("SendMsg")
)

// AiServiceClient is a client for the ai.v1.AiService service.
type AiServiceClient interface {
	StartSession(context.Context, *connect.Request[v1.StartSessionRequest]) (*connect.ServerStreamForClient[v1.StartSessionResponse], error)
	SendMsg(context.Context, *connect.Request[v1.SendMsgRequest]) (*connect.Response[v1.SendMsgResponse], error)
}

// NewAiServiceClient constructs a client for the ai.v1.AiService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aiServiceClient{
		startSession: connect.NewClient[v1.StartSessionRequest, v1.StartSessionResponse](
			httpClient,
			baseURL+AiServiceStartSessionProcedure,
			connect.WithSchema(aiServiceStartSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendMsg: connect.NewClient[v1.SendMsgRequest, v1.SendMsgResponse](
			httpClient,
			baseURL+AiServiceSendMsgProcedure,
			connect.WithSchema(aiServiceSendMsgMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aiServiceClient implements AiServiceClient.
type aiServiceClient struct {
	startSession *connect.Client[v1.StartSessionRequest, v1.StartSessionResponse]
	sendMsg      *connect.Client[v1.SendMsgRequest, v1.SendMsgResponse]
}

// StartSession calls ai.v1.AiService.StartSession.
func (c *aiServiceClient) StartSession(ctx context.Context, req *connect.Request[v1.StartSessionRequest]) (*connect.ServerStreamForClient[v1.StartSessionResponse], error) {
	return c.startSession.CallServerStream(ctx, req)
}

// SendMsg calls ai.v1.AiService.SendMsg.
func (c *aiServiceClient) SendMsg(ctx context.Context, req *connect.Request[v1.SendMsgRequest]) (*connect.Response[v1.SendMsgResponse], error) {
	return c.sendMsg.CallUnary(ctx, req)
}

// AiServiceHandler is an implementation of the ai.v1.AiService service.
type AiServiceHandler interface {
	StartSession(context.Context, *connect.Request[v1.StartSessionRequest], *connect.ServerStream[v1.StartSessionResponse]) error
	SendMsg(context.Context, *connect.Request[v1.SendMsgRequest]) (*connect.Response[v1.SendMsgResponse], error)
}

// NewAiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAiServiceHandler(svc AiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aiServiceStartSessionHandler := connect.NewServerStreamHandler(
		AiServiceStartSessionProcedure,
		svc.StartSession,
		connect.WithSchema(aiServiceStartSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	aiServiceSendMsgHandler := connect.NewUnaryHandler(
		AiServiceSendMsgProcedure,
		svc.SendMsg,
		connect.WithSchema(aiServiceSendMsgMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ai.v1.AiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AiServiceStartSessionProcedure:
			aiServiceStartSessionHandler.ServeHTTP(w, r)
		case AiServiceSendMsgProcedure:
			aiServiceSendMsgHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAiServiceHandler struct{}

func (UnimplementedAiServiceHandler) StartSession(context.Context, *connect.Request[v1.StartSessionRequest], *connect.ServerStream[v1.StartSessionResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("ai.v1.AiService.StartSession is not implemented"))
}

func (UnimplementedAiServiceHandler) SendMsg(context.Context, *connect.Request[v1.SendMsgRequest]) (*connect.Response[v1.SendMsgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ai.v1.AiService.SendMsg is not implemented"))
}
