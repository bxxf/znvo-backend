// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file api/ai/v1/ai.proto (package ai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

//
//# AI Service (v1)
//This service is responsible for handling the requests calling the LLM model.
//The service is responsible for starting a chat session and streaming back responses.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The type of message being sent
 *
 * @generated from enum ai.v1.MessageType
 */
export enum MessageType {
  /**
   * @generated from enum value: CHAT = 0;
   */
  CHAT = 0,

  /**
   * @generated from enum value: ACTIVITIES = 1;
   */
  ACTIVITIES = 1,

  /**
   * @generated from enum value: NUTRITION = 2;
   */
  NUTRITION = 2,

  /**
   * @generated from enum value: MOOD = 3;
   */
  MOOD = 3,

  /**
   * @generated from enum value: CORRELATION = 4;
   */
  CORRELATION = 4,

  /**
   * @generated from enum value: ENDSESSION = 5;
   */
  ENDSESSION = 5,

  /**
   * @generated from enum value: CHAT_PARTIAL = 6;
   */
  CHAT_PARTIAL = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(MessageType)
proto3.util.setEnumType(MessageType, "ai.v1.MessageType", [
  { no: 0, name: "CHAT" },
  { no: 1, name: "ACTIVITIES" },
  { no: 2, name: "NUTRITION" },
  { no: 3, name: "MOOD" },
  { no: 4, name: "CORRELATION" },
  { no: 5, name: "ENDSESSION" },
  { no: 6, name: "CHAT_PARTIAL" },
]);

/**
 * Request to start a chat session
 *
 * @generated from message ai.v1.StartSessionRequest
 */
export class StartSessionRequest extends Message<StartSessionRequest> {
  /**
   * @generated from field: string user_token = 1;
   */
  userToken = "";

  constructor(data?: PartialMessage<StartSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.StartSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSessionRequest {
    return new StartSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSessionRequest {
    return new StartSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartSessionRequest {
    return new StartSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartSessionRequest | PlainMessage<StartSessionRequest> | undefined, b: StartSessionRequest | PlainMessage<StartSessionRequest> | undefined): boolean {
    return proto3.util.equals(StartSessionRequest, a, b);
  }
}

/**
 * Response to starting a chat session
 *
 * @generated from message ai.v1.StartSessionResponse
 */
export class StartSessionResponse extends Message<StartSessionResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId = "";

  /**
   * @generated from field: ai.v1.MessageType message_type = 3;
   */
  messageType = MessageType.CHAT;

  /**
   * @generated from field: string message_id = 4;
   */
  messageId = "";

  constructor(data?: PartialMessage<StartSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.StartSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message_type", kind: "enum", T: proto3.getEnumType(MessageType) },
    { no: 4, name: "message_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSessionResponse {
    return new StartSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSessionResponse {
    return new StartSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartSessionResponse {
    return new StartSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartSessionResponse | PlainMessage<StartSessionResponse> | undefined, b: StartSessionResponse | PlainMessage<StartSessionResponse> | undefined): boolean {
    return proto3.util.equals(StartSessionResponse, a, b);
  }
}

/**
 * Request to send a message to the chat session
 *
 * @generated from message ai.v1.SendMsgRequest
 */
export class SendMsgRequest extends Message<SendMsgRequest> {
  /**
   * @generated from field: string user_token = 1;
   */
  userToken = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: string session_id = 3;
   */
  sessionId = "";

  constructor(data?: PartialMessage<SendMsgRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.SendMsgRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMsgRequest {
    return new SendMsgRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMsgRequest {
    return new SendMsgRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMsgRequest {
    return new SendMsgRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMsgRequest | PlainMessage<SendMsgRequest> | undefined, b: SendMsgRequest | PlainMessage<SendMsgRequest> | undefined): boolean {
    return proto3.util.equals(SendMsgRequest, a, b);
  }
}

/**
 * Response to sending a message to the chat session
 *
 * @generated from message ai.v1.SendMsgResponse
 */
export class SendMsgResponse extends Message<SendMsgResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<SendMsgResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ai.v1.SendMsgResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMsgResponse {
    return new SendMsgResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMsgResponse {
    return new SendMsgResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMsgResponse {
    return new SendMsgResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendMsgResponse | PlainMessage<SendMsgResponse> | undefined, b: SendMsgResponse | PlainMessage<SendMsgResponse> | undefined): boolean {
    return proto3.util.equals(SendMsgResponse, a, b);
  }
}

